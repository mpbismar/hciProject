
                             SLFFEA 1.5

                    Copyright (C) 1999-2008 San Le

                    email:     slffea@yahoo.com
                    homepage:  http://slffea.sourceforge.net/


There are 6 non-linear large deformation elements using updated Lagrange formulation with
Jaumann Stress Rate:

   1. 3-D 8 node brick
   2. 2-D and 3-D 4 node quad
   3. 3-D 4 node tetrahedron
   4. 2-D and 3-D 3 node triangle
   5. 3-D 2 node truss
   6. 3-D 6 node wedge

These elements use input files which have the name "n--input", where the "--" are
the 2 letter prefixes representing the element type.  So for the non-linear
brick, the input file would be "nbrinput".  The contents of the files look like:

Data Begin
____________________________________________________________________________

dynamic relaxation(DR) or conjugate gradient(CG) method ( 0 = CG, 1 = DR )
1
number of iterations for DR or CG
10000
time step for DR
0.25
damping constant for DR
.05088
stress calculation for CG (Lagrangian = 0, stress updating = 1)
0

____________________________________________________________________________

Data End

What I say about choosing these parameters for the non-linear brick still
applies, so I will repeat it below.  The only additional notes to add
are that a good to perform is to make an initial run using the conjugate
gradient method to see if the loads are small enough to be stable, and you don't
have to deal with the time step or damping constant.  Afterward, the choice of
method will be up to you.

Here is the README in ~/slffea-1.5/brick/brick_nl/ that gives more specifics
in terms of choosing the damping constant and time step for the dynamic relaxation
method:
____________________________________________________________________________

                             SLFFEA 1.5 Non-Linear Brick README

                    Copyright (C) 1999 San Le

                    email:     slffea@yahoo.com
                    homepage:  http://slffea.sourceforge.net/


In the slffea-1.0/data/br/ directory, there is the file "nbrinput".  This is where
you enter in values for dt, cc, and iteration_max in that order.  I have a few
examples prepared for the data files "ball", "rubber", "torsion" and "tensile" in
this same directory.  The purpose of these variables is explained below.

As with most non-linear FEA software, running the non-linear brick requires
a little art in the selection of parameters which will keep the program stable
as it iterates toward the solution.

The method of iteration I have chosen is called Updated Lagrange where the mesh
is updated between time steps along with the internal stress which is updated
using the Jaumann Stress Rate.  Once the internal stress times the B matrix added
together for each element achieves equilibrium with the external forces, the
calculation may be considered finished.  This is expressed as:

          P_global = P_global + ( [B transpose] [stress] for each element)

          if P_global = force, stop iterations

P_global is never exactly equal to the force so you will have to decide on the
tolerance acceptable for your needs.  Note that because of the inexactness of
the endpoint, this is NOT automated in the code which simply runs through
the total number of iterations.

The numerical integration method I have chosen is dynamic relaxation.  This
involves formulating the problem as a pseudo dynamic 2nd order ordinary differential
equation with damping, i.e.,

         [m] * [d^2x/dt^2] + [c] * [dx/dt] + [K]*[x] = [Force]

which becomes(after decoupling):

         d^2y/dt^2 + cc * dy/dt + w^2 * y = force

where "cc" is the damping and "w" is the angular frequency.  There are as many
frequencies and modes as there are degrees of freedom in a mesh.  We are concerned
only with the largest and smallest.  The rule for stability is that:

                              dt*(w max) < 2.0

and for best performance:

                              cc = 2*(w min)

which makes the system critically damped and produces the fastest convergence.  This makes
up the three quantities you have to input; time step, dt; damping, cc; and the number of
iterations.  Normally, you would also have to choose a pseudo mass.  I currently have
the program use the diagonal of the global stiffness times 100.

When I run the code, I usually have to experiment with all three quantities since
calculating (w max) and (w min) requires a bit of computation in itself.  It is 
possible using techniques such as the power method and inverse iteration to get (w max)
and (w min), and I may add this feature someday.  For now, you'll just have to try
different values for dt, cc, and iteration_max. 

I recommend doing only a few iterations at first, like 3 or 4 to see if your time
step is good.  If it becomes unstable-and this will usually happen within the first
few steps-you can slightly decrease the time step.  For the value of cc, any mesh
having more than 10 elements usually has a very low (w min) so you may just want to pick
something small for cc.  Underdamping is almost always better than overdamping.  It
should also be noted that depending on the problem, especially how large a load you
want to use, the above criteria may not be sufficient to ensure stability.  Again, the
best thing to do is experiment with all the input parameters.
____________________________________________________________________________

Some additional data which SLFFEA writes out to assist in determining the iteration
number, time step, and damping is the values of the 2 largest(in terms of magnitude)
forces and their corresponding components in the "P_global" or "P_global_CG" variables.
The name of the file containing this data is called "(filename).gplot" where (filename)
is the name of the problem input file.  This data can be plotted using "gnuplot"
and the file "gplot".  So run "gnuplot" and then type:

   load "gplot"

at the prompt.  This file can be very helpful in the following ways:

1) The lines for "P_global" or "P_global_CG" should asymptotically be approaching the
   straight lines representing the forces.  If not, there are significant problems
   with the calculation such as having too large a time step.  

2) It may be possible to decrease the number of iterations if the plots of "P_global"
   or "P_global_CG" show that they have mostly converged with their forces long before
   the final iterations are reached.

3) The best damping value is one that slightly underdamps the calculation.  Because
   in theory(not entirely practice), the damping does not affect the stability, it
   is best to start with very low values and increase until underdamping is reached.
   You can see from the plots if you have excessively overdamped the system because the
   value of "P_global" or "P_global_CG" never overshoots the force but sluggishly
   approaches it.  It would be better to underdamp and allow a few oscillations
   which quickly converge to the forces.


