3 X Volume will not equal the value of lumped summed mass if I
set rho = 1.0 because the terms in lumped sum( although based on the [B] matrix
which results from interpolating Ux, Uy, Uz) have rotation terms which when lumped
with the translation in x, y, z, do not produce 3 X Volume.  What I can do is 
comment out the rows of the [B] matrix which correspond to Nz, which will
result in only summing over translation x,y,z.

You can compare the Volumes of the input file "quad" with the Area
of the input file "qdinc" in the qd data directory.  Remember that
I print out 3 X Volume for "quad", and 2 X Area for "qdinc".

----------------------------------------------------------------

I tried examing the eigenvalues of the mass matrix of the plate to
see if it is truely positive definite.  The program eigen indicated
that this was true, but the programs lanczos produced some negative
eigenvalues.  I think the eigen program is correct since it is set
up to solve for only the lowest and highest eigenvalues using the power
method and inverse iteration.  Lanczos does pick up the lowest, but
unfortunately, it captures some negative values as well.  Interestingly,
I tried seeing what the lanczos implementation being used in the FEM programs
will produce, but the skyline routines of both Benson and Hughes fail to
do a proper decomposition of the A matrix.  Actually, both codes
are the same and produce the same decompositions, but you have to get
rid of line 130 in "sky_hughes.c" which is "if(a[ii] != 0.)".  This
line prevents division by zero in by a[ii].   The program lanczos.c and
eigen.c use a different LU decomposition routine, which doesn't involve
skyline, so this may be why they remain stable.  The reason lanczos
fails is probably due to the smallness of the lowest eigenvalue:

    3.12154509e-11

The largest is:

    6.45643014e+02 

making the condition ratio very big.  I did some experiements with
diagonal matrices(the diagonals are the eigenvalues) and this fact
bore itself out. 

You can look at the resulting T matrix and see that the off diagonals
have not converged to zero, but remain their particular value
even if more iterations are used in qr.c.  There doesn't seem 
anthing I can do about it except find a new way of finding the
eigenvalues of tridiagonal T.


-----------------------
Eigenvalue Calculations
-----------------------

Unlike the 4 node element, for the 3 node triangle shells, there is a difference
in results when I do modal analysis depending on whether the there is full
storage of all the element masses or if they are all calculated with each itteration.
This is true for both using the conjugate gradient method and with LU decomposition.
For the 4 node element, it is always the same.  I tried to track the problem
down by seeing if the element stiffnesses were affected by the storage of mass,
but this was not the case.  The code used was:


        dum = neqel15*neqel15;
        /*for( k = 0; k < numel_K; ++k )
        {
            for( i = 0; i < neqel15; ++i )
            {
                for( j = 0; j < neqel15; ++j )
                {
                    printf( "%16.8e ", *(K + dum*k + neqel15*i +j));
                }
                printf(" \n");
            }
            printf(" \n");
        }*/

on line 91 of "shlanczos.c".

Then I wrote out the values based on line 406 of "shconj.c":

    if( counter > 14 && counter < 18 )
    printf( "%4d %18.10e  %16.8e  %16.8e  %16.8e  %18.10e %16.8e\n",j,alpha,
        beta,*(U+j),*(r+j),*(P_global_CG+j),*(p+j));

and the input file "rooftr16".  When I look carefully at the numbers for storage
and non-storage of the masses, I get:

  27   1.7960375792e+00    1.68762873e+00    1.83303096e-05   -7.77977445e-01   -3.2778197670e+00   3.81064466e-07

  27   1.7960375792e+00    1.68762873e+00    1.83303096e-05   -7.77977445e-01   -3.2778197669e+00   3.81064466e-07

which shows there is a slight change in the value of *(P_global_CG+27):


-3.2778197670e+00 vs. -3.2778197669e+00

This eventually becomes big enough to cause the disparity I see in the results. 
My current conclusion is that this is a problem with the math co-processor rather
than my code.  So I will accept this as the case for now and maybe revisit this
in the future in case the discrepency is larger, and easier to track down.  Incidentally,
I focus on the element mass storage rather than the element stiffnesses because
stiffnesses or stored first, then mass.  So basically, the problem exists even
with all the element stiffnesses stored. 







